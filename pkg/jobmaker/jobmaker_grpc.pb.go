// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobmaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobmakerClient is the client API for Jobmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobmakerClient interface {
	// Sends a greeting
	CreateLauncherJob(ctx context.Context, in *CreateLauncherJobRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type jobmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobmakerClient(cc grpc.ClientConnInterface) JobmakerClient {
	return &jobmakerClient{cc}
}

func (c *jobmakerClient) CreateLauncherJob(ctx context.Context, in *CreateLauncherJobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/jobmaker.jobmaker/CreateLauncherJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobmakerServer is the server API for Jobmaker service.
// All implementations must embed UnimplementedJobmakerServer
// for forward compatibility
type JobmakerServer interface {
	// Sends a greeting
	CreateLauncherJob(context.Context, *CreateLauncherJobRequest) (*JobResponse, error)
	mustEmbedUnimplementedJobmakerServer()
}

// UnimplementedJobmakerServer must be embedded to have forward compatible implementations.
type UnimplementedJobmakerServer struct {
}

func (UnimplementedJobmakerServer) CreateLauncherJob(context.Context, *CreateLauncherJobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLauncherJob not implemented")
}
func (UnimplementedJobmakerServer) mustEmbedUnimplementedJobmakerServer() {}

// UnsafeJobmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobmakerServer will
// result in compilation errors.
type UnsafeJobmakerServer interface {
	mustEmbedUnimplementedJobmakerServer()
}

func RegisterJobmakerServer(s grpc.ServiceRegistrar, srv JobmakerServer) {
	s.RegisterService(&Jobmaker_ServiceDesc, srv)
}

func _Jobmaker_CreateLauncherJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLauncherJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobmakerServer).CreateLauncherJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobmaker.jobmaker/CreateLauncherJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobmakerServer).CreateLauncherJob(ctx, req.(*CreateLauncherJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobmaker_ServiceDesc is the grpc.ServiceDesc for Jobmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobmaker.jobmaker",
	HandlerType: (*JobmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLauncherJob",
			Handler:    _Jobmaker_CreateLauncherJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jobmaker.proto",
}
